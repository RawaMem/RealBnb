#!/usr/bin/env node
const { port, environment } = require('../config');
const app = require('../app');
const db = require('../db/models');

//websocket
const { createServer } = require('http');
const { Server } = require('socket.io');
const { createDirectMessage, editDirectMessage, deleteDirectMessage, editOnlineStatusToFalse, editOnlineStatusToTrue, editDirectMessageToRead } = require('../routes/sockets');
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: environment == 'development' ? 'http://localhost:3000' : 'https://realbnb.onrender.com/',
    methods: ["GET", "POST", "PUT", "PATCH", "DELETE"]
  }
});
const addString = string => {
  return string + " testing"
};

io.on("connection", socket => {
  console.log(`THIS IS THE SOCKET ID IN BIN WWW ${socket.id}`)

  socket.on('message', async (data) => {
    io.emit('testing', data);

  })

  socket.on('sendMessage', async (message) => {
    console.log('BIN/WWW SEND MESSAGE SOCKT RUNNING, HERE IS MESSAGE', message)
    const createdMessage = await createDirectMessage(message)
    console.log('BIN/WWW SEND MESSAGE SOCKT RUNNING, THIS IS CREATED MESSAGE', createdMessage)
    io.emit('messageReceived', createdMessage)
  })

  socket.on('editMessage', async(message) =>{
    const edittedMessage = await editDirectMessage(message)
    io.emit('messageEditted', edittedMessage)
  })

  socket.on('deleteMessage', async(messageId) =>{
    const deleteResult = await deleteDirectMessage(messageId)
    io.emit('messageDeleted', messageId)
  })

  socket.on('messageRead', async(messageId) =>{
    const readMessage = await editDirectMessageToRead(messageId)
    io.emit('messageRead', readMessage)
  })

  socket.on('userOnline', async (userId) =>{
    const user = await editOnlineStatusToTrue(userId)
    io.emit('userStatusOnline', user)
  })

  socket.on('userOffline', async (userId) =>{
    const user = await editOnlineStatusToFalse(userId)
    io.emit('userStatusOffline', user)
  })



})
//end websocket code

// Check the database connection before starting the app
db.sequelize
  .authenticate()
  .then(() => {
    console.log('Database connection success! Sequelize is ready to use...');

    // Start listening for connections
    httpServer.listen(port, () => console.log(`Listening on port ${port}...`));
  })
  .catch((err) => {
    console.log('Database connection failure.');
    console.error(err);
  });
